/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './chips.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from 'primeng/components/chips/chips';
import * as import10 from 'primeng/components/dom/domhandler';
import * as import11 from '../../node_modules/primeng/components/chips/chips.ngfactory';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/forms/src/directives/control_value_accessor';
export class Wrapper_ChipsComponent {
  /*private*/ _eventHandler:Function;
  context:import0.ChipsComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor() {
    this._changed = false;
    this.context = new import0.ChipsComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_index(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.index = currValue;
      this._expr_0 = currValue;
    }
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_ChipsComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_ChipsComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.ChipsComponent>;
  _ChipsComponent_0_3:Wrapper_ChipsComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ChipsComponent_Host0,renderType_ChipsComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'inputText',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_ChipsComponent0(this.viewUtils,this,0,this._el_0);
    this._ChipsComponent_0_3 = new Wrapper_ChipsComponent();
    this.compView_0.create(this._ChipsComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._ChipsComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ChipsComponent) && (0 === requestNodeIndex))) { return this._ChipsComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ChipsComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const ChipsComponentNgFactory:import8.ComponentFactory<import0.ChipsComponent> = new import8.ComponentFactory<import0.ChipsComponent>('inputText',View_ChipsComponent_Host0,import0.ChipsComponent);
const styles_ChipsComponent:any[] = ([] as any[]);
var renderType_ChipsComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_ChipsComponent,{});
export class View_ChipsComponent0 extends import2.AppView<import0.ChipsComponent> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _el_9:any;
  compView_9:import2.AppView<import9.Chips>;
  _DomHandler_9_3:import10.DomHandler;
  _Chips_9_4:import11.Wrapper_Chips;
  __NG_VALUE_ACCESSOR_9_5:any[];
  _query_PrimeTemplate_9_0:import12.QueryList<any>;
  _text_10:any;
  _text_11:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ChipsComponent0,renderType_ChipsComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
  }
  get _NG_VALUE_ACCESSOR_9_5():any[] {
    if ((this.__NG_VALUE_ACCESSOR_9_5 == null)) { (this.__NG_VALUE_ACCESSOR_9_5 = [this._Chips_9_4.context]); }
    return this.__NG_VALUE_ACCESSOR_9_5;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','col-md-4'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'    \n            ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'label',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'',(null as any));
    this._text_5 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','col-md-8'),(null as any));
    this._text_8 = this.renderer.createText(this._el_7,'    \n            ',(null as any));
    this._el_9 = import3.createRenderElement(this.renderer,this._el_7,'p-chips',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_9 = new import11.View_Chips0(this.viewUtils,this,9,this._el_9);
    this._DomHandler_9_3 = new import10.DomHandler();
    this._Chips_9_4 = new import11.Wrapper_Chips(new import13.ElementRef(this._el_9),this._DomHandler_9_3);
    this._query_PrimeTemplate_9_0 = new import12.QueryList<any>();
    this.compView_9.create(this._Chips_9_4.context);
    this._text_10 = this.renderer.createText(this._el_7,'\n        ',(null as any));
    this._text_11 = this.renderer.createText(parentRenderNode,'            \n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_9,new import3.InlineArray8(6,'ngModelChange',(null as any),'onAdd',(null as any),'onRemove',(null as any)),this.eventHandler(this.handleEvent_9));
    this._Chips_9_4.subscribe(this,this.eventHandler(this.handleEvent_9),true,true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._el_9,
      this._text_10,
      this._text_11
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.DomHandler) && (9 === requestNodeIndex))) { return this._DomHandler_9_3; }
    if (((token === import9.Chips) && (9 === requestNodeIndex))) { return this._Chips_9_4.context; }
    if (((token === import14.NG_VALUE_ACCESSOR) && (9 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_9_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Chips_9_4.ngDoCheck(this,this._el_9,throwOnChange);
    if (!throwOnChange) {
      if (this._query_PrimeTemplate_9_0.dirty) {
        this._query_PrimeTemplate_9_0.reset(([] as any[]));
        this._Chips_9_4.context.templates = this._query_PrimeTemplate_9_0;
        this._query_PrimeTemplate_9_0.notifyOnChanges();
      }
      if ((this.numberOfChecks === 0)) { this._Chips_9_4.context.ngAfterContentInit(); }
    }
    const currVal_17:any = import3.inlineInterpolate(1,'',this.context.name,'');
    if (import3.checkBinding(throwOnChange,this._expr_17,currVal_17)) {
      this.renderer.setText(this._text_4,currVal_17);
      this._expr_17 = currVal_17;
    }
    const currVal_18:any = this.context.values;
    if (import3.checkBinding(throwOnChange,this._expr_18,currVal_18)) {
      this.renderer.setElementProperty(this._el_9,'ngModel',currVal_18);
      this._expr_18 = currVal_18;
    }
    this.compView_9.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_9.destroy();
    this._Chips_9_4.ngOnDestroy();
  }
  handleEvent_9(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.values = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'onAdd')) {
      const pd_sub_1:any = ((<any>this.context.add($event.value)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'onRemove')) {
      const pd_sub_2:any = ((<any>this.context.remove($event.value)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}