/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './multiselect.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../services/service';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/http/src/http';
import * as import11 from 'primeng/components/multiselect/multiselect';
import * as import12 from 'primeng/components/dom/domhandler';
import * as import13 from '../../node_modules/primeng/components/multiselect/multiselect.ngfactory';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '@angular/forms/src/directives/control_value_accessor';
export class Wrapper_MultiSelectComponent {
  /*private*/ _eventHandler:Function;
  context:import0.MultiSelectComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.MultiSelectComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_index(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.index = currValue;
      this._expr_0 = currValue;
    }
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_MultiSelectComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_MultiSelectComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.MultiSelectComponent>;
  _Service_0_3:import6.Service;
  _MultiSelectComponent_0_4:Wrapper_MultiSelectComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MultiSelectComponent_Host0,renderType_MultiSelectComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'inputText',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_MultiSelectComponent0(this.viewUtils,this,0,this._el_0);
    this._Service_0_3 = new import6.Service(this.injectorGet(import10.Http,this.parentIndex));
    this._MultiSelectComponent_0_4 = new Wrapper_MultiSelectComponent(this._Service_0_3);
    this.compView_0.create(this._MultiSelectComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._MultiSelectComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.Service) && (0 === requestNodeIndex))) { return this._Service_0_3; }
    if (((token === import0.MultiSelectComponent) && (0 === requestNodeIndex))) { return this._MultiSelectComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MultiSelectComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MultiSelectComponentNgFactory:import9.ComponentFactory<import0.MultiSelectComponent> = new import9.ComponentFactory<import0.MultiSelectComponent>('inputText',View_MultiSelectComponent_Host0,import0.MultiSelectComponent);
const styles_MultiSelectComponent:any[] = ([] as any[]);
var renderType_MultiSelectComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_MultiSelectComponent,{});
export class View_MultiSelectComponent0 extends import2.AppView<import0.MultiSelectComponent> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _el_9:any;
  compView_9:import2.AppView<import11.MultiSelect>;
  _DomHandler_9_3:import12.DomHandler;
  _MultiSelect_9_4:import13.Wrapper_MultiSelect;
  __NG_VALUE_ACCESSOR_9_5:any[];
  _text_10:any;
  _text_11:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MultiSelectComponent0,renderType_MultiSelectComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
  }
  get _NG_VALUE_ACCESSOR_9_5():any[] {
    if ((this.__NG_VALUE_ACCESSOR_9_5 == null)) { (this.__NG_VALUE_ACCESSOR_9_5 = [this._MultiSelect_9_4.context]); }
    return this.__NG_VALUE_ACCESSOR_9_5;
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','col-md-4'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'    \n            ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'label',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'',(null as any));
    this._text_5 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','col-md-8'),(null as any));
    this._text_8 = this.renderer.createText(this._el_7,'    \n            ',(null as any));
    this._el_9 = import3.createRenderElement(this.renderer,this._el_7,'p-multiSelect',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_9 = new import13.View_MultiSelect0(this.viewUtils,this,9,this._el_9);
    this._DomHandler_9_3 = new import12.DomHandler();
    this._MultiSelect_9_4 = new import13.Wrapper_MultiSelect(new import14.ElementRef(this._el_9),this._DomHandler_9_3,this.renderer,this.parentView.injectorGet(import15.IterableDiffers,this.parentIndex));
    this.compView_9.create(this._MultiSelect_9_4.context);
    this._text_10 = this.renderer.createText(this._el_7,'            \n        ',(null as any));
    this._text_11 = this.renderer.createText(parentRenderNode,'            \n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_9,new import3.InlineArray4(4,'ngModelChange',(null as any),'onChange',(null as any)),this.eventHandler(this.handleEvent_9));
    this._MultiSelect_9_4.subscribe(this,this.eventHandler(this.handleEvent_9),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._el_9,
      this._text_10,
      this._text_11
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.DomHandler) && (9 === requestNodeIndex))) { return this._DomHandler_9_3; }
    if (((token === import11.MultiSelect) && (9 === requestNodeIndex))) { return this._MultiSelect_9_4.context; }
    if (((token === import16.NG_VALUE_ACCESSOR) && (9 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_9_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_9_0_0:any = this.context.itens;
    this._MultiSelect_9_4.check_options(currVal_9_0_0,throwOnChange,false);
    this._MultiSelect_9_4.ngDoCheck(this,this._el_9,throwOnChange);
    const currVal_16:any = import3.inlineInterpolate(1,'',this.context.name,'');
    if (import3.checkBinding(throwOnChange,this._expr_16,currVal_16)) {
      this.renderer.setText(this._text_4,currVal_16);
      this._expr_16 = currVal_16;
    }
    const currVal_17:any = this.context.selectedItem;
    if (import3.checkBinding(throwOnChange,this._expr_17,currVal_17)) {
      this.renderer.setElementProperty(this._el_9,'ngModel',currVal_17);
      this._expr_17 = currVal_17;
    }
    this.compView_9.internalDetectChanges(throwOnChange);
    if (!throwOnChange) {
      if ((this.numberOfChecks === 0)) { this._MultiSelect_9_4.context.ngAfterViewInit(); }
      this._MultiSelect_9_4.context.ngAfterViewChecked();
    }
  }
  destroyInternal():void {
    this.compView_9.destroy();
    this._MultiSelect_9_4.ngOnDestroy();
  }
  handleEvent_9(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.selectedItem = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'onChange')) {
      const pd_sub_1:any = ((<any>this.context.setValue($event.value)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}